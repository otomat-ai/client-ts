{"version":3,"file":"index.mjs","sources":["../src/generator/types.ts","../src/ogc/index.ts","../src/module/types.ts"],"sourcesContent":["import { JSONSchema7 } from 'json-schema';\r\nimport { Meta, ModuleNames, ModuleOptionValue } from '../module/types';\r\nimport { ChatCompletionRequestMessage } from 'openai';\r\n\r\nexport const GENERATOR_MODELS = [\r\n  'gpt-3.5-turbo',\r\n  'gpt-4',\r\n  'gpt-3.5-turbo-16k',\r\n  'gpt-4-32k',\r\n] as const;\r\n\r\nexport type GeneratorModel = typeof GENERATOR_MODELS[number];\r\n\r\nexport type GeneratorSettings = {\r\n  context: 'default' | 'full';\r\n  model?: GeneratorModel;\r\n  retries?: number;\r\n  apiKey: string;\r\n};\r\n\r\nexport type GeneratorInstructions = {\r\n  prompt: string;\r\n  context?: string;\r\n  examples?: GeneratorExample[];\r\n  options?: GeneratorOption[];\r\n  output: GeneratorOutput | GeneratorOutput[];\r\n  functions?: GeneratorFunction[];\r\n};\r\n\r\nexport type GeneratorExample = {\r\n  input: string;\r\n  output: string;\r\n};\r\n\r\nexport type GeneratorModule<T extends ModuleNames> = {\r\n  name: T;\r\n  options?: ModuleOptionValue<T>;\r\n  inputReference?: any;\r\n  outputReference?: any;\r\n};\r\n\r\nexport type GeneratorFlowGenerateOption = {\r\n  type: 'generate';\r\n};\r\n\r\nexport type GeneratorFlowProcessOption = {\r\n  type: 'process';\r\n  module: GeneratorModule<any>;\r\n};\r\n\r\nexport type GeneratorFlowOption =\r\n  | GeneratorFlowGenerateOption\r\n  | GeneratorFlowProcessOption;\r\n\r\nexport type GeneratorFlow = GeneratorFlowOption[];\r\n\r\nexport type GeneratorOutput = {\r\n  description?: string;\r\n  schema: JSONSchema7;\r\n};\r\n\r\nexport type GeneratorOption = {\r\n  name: string;\r\n  description: string;\r\n  type: 'string' | 'number' | 'boolean' | 'object' | 'array';\r\n  constant: boolean;\r\n  default?: any;\r\n};\r\n\r\nexport type GeneratorFunctionArgument = {\r\n  name: string;\r\n  description?: string;\r\n  type: 'string' | 'number' | 'boolean' | 'object' | 'array';\r\n  required: boolean;\r\n  default?: any;\r\n};\r\n\r\nexport type BaseGeneratorFunction = {\r\n  name: string;\r\n  description: string;\r\n  arguments: GeneratorFunctionArgument[];\r\n  chain: boolean;\r\n};\r\n\r\nexport type GeneratorEndpointFunction = BaseGeneratorFunction & {\r\n  type: 'endpoint';\r\n  url: string;\r\n  method: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\r\n  payload: 'query' | 'body';\r\n  headers?: Record<string, string>;\r\n};\r\n\r\nexport type GeneratorExternalFunction = BaseGeneratorFunction & {\r\n  type: 'external';\r\n};\r\n\r\nexport type OGCFunction = {\r\n  function: Function;\r\n  description: string;\r\n  chain: boolean;\r\n};\r\n\r\nexport type GeneratorFunction =\r\n  | GeneratorEndpointFunction\r\n  | GeneratorExternalFunction;\r\n\r\nexport type OGCGeneratorFunction = GeneratorEndpointFunction | OGCFunction;\r\n\r\nexport type Generator = {\r\n  instructions: GeneratorInstructions;\r\n  settings: GeneratorSettings;\r\n  flow?: GeneratorFlow;\r\n  data: any;\r\n  options?: Record<string, any>;\r\n  history?: ChatCompletionRequestMessage[];\r\n};\r\n\r\nexport type OGCGenerator<O extends GeneratorOption[]> = Omit<\r\n  Generator,\r\n  'instructions' | 'data' | 'options' | 'history'\r\n> & {\r\n  instructions: Omit<GeneratorInstructions, 'functions' | 'options'> & {\r\n    functions: OGCGeneratorFunction[];\r\n    options?: O;\r\n  };\r\n};\r\n\r\nexport function isOGCFunction(\r\n  functionToCheck: OGCGeneratorFunction,\r\n): functionToCheck is OGCFunction {\r\n  return (functionToCheck as OGCFunction).function !== undefined;\r\n}\r\n\r\nexport type BaseOGCResponse = {\r\n  meta: Meta;\r\n};\r\n\r\nexport type OGCFunctionResponse = BaseOGCResponse & {\r\n  type: 'function';\r\n  data: {\r\n    name: string;\r\n    arguments: string;\r\n    chain: boolean;\r\n  };\r\n};\r\n\r\nexport type OGCJSONResponse = BaseOGCResponse & {\r\n  type: 'json';\r\n  data: any;\r\n};\r\n\r\nexport type OGCResponse = OGCFunctionResponse | OGCJSONResponse;\r\n\r\nexport type OGCFunctionOutput = OGCFunctionResponse & {\r\n  result: any;\r\n};\r\n\r\nexport type OGCOutput = OGCFunctionOutput | OGCJSONResponse;\r\n","import {\r\n  Generator,\r\n  GeneratorFunction,\r\n  GeneratorOption,\r\n  OGCGenerator,\r\n  OGCOutput,\r\n  OGCResponse,\r\n  isOGCFunction,\r\n} from '../generator/types';\r\nimport { ChatCompletionRequestMessage } from 'openai';\r\n\r\ntype InputOptions<O extends GeneratorOption[]> = {\r\n  [K in O[number]['name']]: Extract<\r\n    O[number],\r\n    { name: K }\r\n  >['type'] extends 'string'\r\n    ? string\r\n    : Extract<O[number], { name: K }>['type'] extends 'number'\r\n    ? number\r\n    : Extract<O[number], { name: K }>['type'] extends 'boolean'\r\n    ? boolean\r\n    : Extract<O[number], { name: K }>['type'] extends 'object'\r\n    ? object\r\n    : Extract<O[number], { name: K }>['type'] extends 'array'\r\n    ? any[]\r\n    : never;\r\n};\r\n\r\ntype GenerationProps<O extends GeneratorOption[]> = {\r\n  data: any;\r\n  options: InputOptions<O>;\r\n  history?: ChatCompletionRequestMessage[];\r\n};\r\n\r\nclass OGC<O extends GeneratorOption[]> {\r\n  private generator: OGCGenerator<O>;\r\n\r\n  constructor({ generator }: OGCProps<O>) {\r\n    this.generator = generator;\r\n  }\r\n\r\n  private async _generate({\r\n    data,\r\n    options,\r\n    history,\r\n  }: GenerationProps<O>): Promise<OGCOutput> {\r\n    try {\r\n      const functions: GeneratorFunction[] =\r\n        this.generator.instructions.functions.map((f) => {\r\n          if (isOGCFunction(f)) {\r\n            return {\r\n              name: f.function.name,\r\n              description: f.description,\r\n              arguments: f.function.arguments,\r\n              chain: f.chain,\r\n              type: 'external',\r\n            };\r\n          } else {\r\n            return f;\r\n          }\r\n        });\r\n\r\n      const generator: Generator = {\r\n        ...this.generator,\r\n        instructions: {\r\n          ...this.generator.instructions,\r\n          functions,\r\n        },\r\n        data,\r\n        options,\r\n        history: [...(history || [])],\r\n      };\r\n\r\n      const result = await fetch('http://localhost:3000/generate', {\r\n        method: 'POST',\r\n        body: JSON.stringify(generator),\r\n      });\r\n\r\n      const output: OGCResponse = (await result.json()) as OGCResponse;\r\n\r\n      if (output.type === 'function') {\r\n        const f = this.generator.instructions.functions\r\n          .filter(isOGCFunction)\r\n          .find((f) => f.function.name === output.data.name);\r\n        if (!f) {\r\n          throw new Error('Function not found');\r\n        }\r\n\r\n        const funcResult = await f.function(output.data.arguments);\r\n\r\n        if (f.chain) {\r\n          return this._generate({\r\n            data,\r\n            options,\r\n            history: [\r\n              ...(history || []),\r\n              {\r\n                role: 'assistant',\r\n                function_call: output.data,\r\n              },\r\n              {\r\n                role: 'function',\r\n                name: f.function.name,\r\n                content: JSON.stringify(funcResult),\r\n              },\r\n            ],\r\n          });\r\n        }\r\n\r\n        return {\r\n          ...output,\r\n          result: funcResult,\r\n        };\r\n      }\r\n\r\n      return output;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  public async generate(props: GenerationProps<O>) {\r\n    return this._generate(props);\r\n  }\r\n}\r\n\r\ntype OGCProps<O extends GeneratorOption[]> = {\r\n  generator: OGCGenerator<O>;\r\n};\r\n\r\nexport function createOGC<O extends GeneratorOption[]>(\r\n  props: OGCProps<O>,\r\n): OGC<O> {\r\n  return new OGC(props);\r\n}\r\n","import {\r\n  ChatCompletionFunctions,\r\n  ChatCompletionRequestMessageFunctionCall,\r\n} from 'openai';\r\nimport { GeneratorModel, GeneratorModule } from '../generator/types';\r\n\r\nexport type ModuleNames = keyof typeof modules;\r\n\r\nexport type ModuleOptionDefinition<T extends string | number | boolean> = {\r\n  default: T;\r\n  required: boolean;\r\n  description: string;\r\n};\r\n\r\nexport type ModuleOptionValue<T extends ModuleNames> = {\r\n  [K in keyof typeof modules[T]['options']]?: typeof modules[T]['options'][K] extends ModuleOptionDefinition<\r\n    infer R\r\n  >\r\n    ? R\r\n    : never;\r\n};\r\n\r\nexport type Module<T extends Record<string, ModuleOptionDefinition<any>>> = {\r\n  options: T;\r\n};\r\n\r\nexport const modules: Record<\r\n  string,\r\n  Module<Record<string, ModuleOptionDefinition<any>>>\r\n> = {\r\n  analysis: {\r\n    options: {},\r\n  },\r\n  compliance: {\r\n    options: {\r\n      retry: {\r\n        default: true as boolean, // TODO: Remove \"as type\" necessity\r\n        required: false,\r\n        description: 'Whether to retry the command if the response is invalid',\r\n      },\r\n    },\r\n  },\r\n} as const satisfies Record<\r\n  string,\r\n  Module<Record<string, ModuleOptionDefinition<any>>>\r\n>;\r\n\r\nexport type BaseProcessInfo = {\r\n  module: string;\r\n  options: ModuleOptionValue<any>;\r\n};\r\n\r\nexport type SuccesfulProcessInfo = BaseProcessInfo & {\r\n  status: 'success';\r\n};\r\n\r\nexport type FailedProcessInfo = BaseProcessInfo & {\r\n  status: 'failed';\r\n  error: string;\r\n};\r\n\r\nexport type ProcessInfo = SuccesfulProcessInfo | FailedProcessInfo;\r\n\r\nexport type Meta = {\r\n  version: string;\r\n  model: GeneratorModel;\r\n  cost: number;\r\n  retries: number;\r\n  process: { [P in keyof typeof modules]?: ProcessInfo };\r\n};\r\n\r\ntype BaseCompletion = {\r\n  cost: number;\r\n  retries: number;\r\n};\r\n\r\ntype JSONCompletion = BaseCompletion & {\r\n  type: 'json';\r\n  data: any;\r\n};\r\n\r\ntype FunctionCompletion = BaseCompletion & {\r\n  type: 'function';\r\n  function: ChatCompletionFunctions;\r\n  chain: boolean;\r\n  data: ChatCompletionRequestMessageFunctionCall;\r\n};\r\n\r\ntype ErrorCompletion = BaseCompletion & {\r\n  type: 'error';\r\n  error: any;\r\n  // error: CompletionErrorType,\r\n};\r\n\r\nexport type SuccesfulCompletion = JSONCompletion | FunctionCompletion;\r\n\r\nexport type Completion = SuccesfulCompletion | ErrorCompletion;\r\n\r\ntype BaseOperatorData = {\r\n  generator: Generator;\r\n  modules: GeneratorModule<ModuleNames>[];\r\n  meta: Meta;\r\n};\r\n\r\nexport type PreOperatorData = BaseOperatorData;\r\n\r\nexport type PostOperatorData = BaseOperatorData & {\r\n  completion: SuccesfulCompletion;\r\n};\r\n\r\ntype BaseOperatorSuccess = {\r\n  success: true;\r\n  generator: Generator;\r\n  meta: Meta;\r\n};\r\n\r\ntype PreOperatorSuccess = BaseOperatorSuccess;\r\n\r\ntype PostOperatorSuccess = BaseOperatorSuccess & {\r\n  completion: Completion;\r\n};\r\n\r\ntype OperatorError = {\r\n  success: false;\r\n  error: string;\r\n  meta: Meta;\r\n};\r\n\r\ntype PreOperatorError = OperatorError;\r\n\r\ntype PostOperatorError = OperatorError & {\r\n  retry: boolean;\r\n};\r\n\r\nexport type PreOperatorResult = PreOperatorSuccess | PreOperatorError;\r\n\r\nexport type PostOperatorResult = PostOperatorSuccess | PostOperatorError;\r\n"],"names":[],"mappings":"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"}